import simpy
import random

class NvlinkSimulation:
    def __init__(self, env, num_gpus):
        self.env = env
        self.num_gpus = num_gpus
        self.link_bandwidth = 100  # Example bandwidth in GB/s

        # Other components like GPUs, memory, etc. can be added here.

    def process_request(self, request):
        # Implement how the request is processed over the NVLink link.
        yield self.env.timeout(random.uniform(0.1, 0.5))  # Simulate processing time

    def run(self):
        for i in range(self.num_gpus):
            self.env.process(self.gpu_job(i))

    def gpu_job(self, gpu_id):
        while True:
            # Simulate tasks generated by each GPU
            request = self.generate_request(gpu_id)
            yield self.env.process(self.process_request(request))

    def generate_request(self, gpu_id):
        # Simulate request generation for a GPU
        # For example, generate a request to transfer data to another GPU.
        # You can use random events to simulate real-world behavior.
        # For now, let's assume a simple request with a size in bytes.
        request_size = random.randint(1000, 10000)  # Random size for the request
        print (f"The request size is {request_size}")
        return {'gpu_id': gpu_id, 'size': request_size}  # Return a dictionary representing the request

env = simpy.Environment()
num_gpus = 4  # Change this to the desired number of GPUs
sim = NvlinkSimulation(env, num_gpus)
sim.run()

# Run the simulation for a certain duration
env.run(until=1000)  # Change 1000 to the desired simulation duration in time units.